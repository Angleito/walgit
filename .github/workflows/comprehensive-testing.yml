name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  SUI_VERSION: 'testnet'
  RUST_VERSION: 'stable'

jobs:
  # Job 1: Smart Contract Tests (Move)
  smart-contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install Sui CLI
        run: |
          # Download pre-built Sui binary for Linux
          curl -LO https://github.com/MystenLabs/sui/releases/download/testnet-v1.49.1/sui-testnet-v1.49.1-ubuntu-x86_64.tgz
          tar -xzf sui-testnet-v1.49.1-ubuntu-x86_64.tgz
          # Move sui binary to PATH
          sudo mv sui /usr/local/bin/
          sudo chmod +x /usr/local/bin/sui
          
      - name: Verify Sui installation
        run: |
          sui --version
          sui client --help
          
      - name: Setup Sui environment
        working-directory: ./move
        run: |
          sui client new-env --alias testing --rpc https://fullnode.testnet.sui.io:443
          sui client switch --env testing
          
      - name: Build Move contracts
        working-directory: ./move
        run: |
          # Build with skip-fetch to avoid git dependency issues in CI
          sui move build --skip-fetch-latest-git-deps || true
          
      - name: Run basic Move tests
        working-directory: ./move
        run: |
          sui move test --skip-fetch-latest-git-deps
          
      - name: Run advanced access control tests
        working-directory: ./move
        run: |
          sui move test advanced_access_control_tests --skip-fetch-latest-git-deps
          
      - name: Run SEAL policy interaction tests
        working-directory: ./move
        run: |
          sui move test seal_policy_interaction_tests --skip-fetch-latest-git-deps
          
      - name: Run state change validation tests
        working-directory: ./move
        run: |
          sui move test state_change_validation_tests --skip-fetch-latest-git-deps
          
      - name: Generate test coverage report
        working-directory: ./move
        run: |
          sui move test --coverage --skip-fetch-latest-git-deps
          
      - name: Upload Move test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: move-test-results
          path: |
            move/coverage/
            move/build/
          retention-days: 7

  # Job 2: Backend CLI Tests
  backend-cli-tests:
    name: Backend CLI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        node-version: ['18', '20']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install backend dependencies
        working-directory: ./walgit-backend
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./walgit-backend
        run: npm run lint --if-present
        
      - name: Run unit tests
        working-directory: ./walgit-backend
        run: npm test
        env:
          NODE_ENV: test
          WALGIT_TEST_MODE: true
          
      - name: Run integration tests
        working-directory: ./walgit-backend
        run: npm run test:integration --if-present
        env:
          NODE_ENV: test
          WALGIT_TEST_MODE: true
          
      - name: Test CLI commands
        working-directory: ./walgit-backend
        run: |
          # Test CLI installation
          npm link
          
          # Test basic commands
          walgit --help
          walgit --version
          
          # Test command validation
          ! walgit invalid-command 2>/dev/null
          
      - name: Generate backend coverage report
        working-directory: ./walgit-backend
        run: npm run coverage --if-present
        
      - name: Upload backend test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results-node${{ matrix.node-version }}
          path: |
            walgit-backend/coverage/
            walgit-backend/test-results/
          retention-days: 7

  # Job 3: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install frontend dependencies
        working-directory: ./walgit-frontend
        run: npm ci
        
      - name: Run TypeScript compilation
        working-directory: ./walgit-frontend
        run: npm run build
        
      - name: Run ESLint
        working-directory: ./walgit-frontend
        run: npm run lint
        
      - name: Run unit tests
        working-directory: ./walgit-frontend
        run: npm test
        env:
          CI: true
          
      - name: Run component tests
        working-directory: ./walgit-frontend
        run: npm run test:components --if-present
        env:
          CI: true
          
      - name: Generate frontend coverage report
        working-directory: ./walgit-frontend
        run: npm run coverage --if-present
        
      - name: Upload frontend test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            walgit-frontend/coverage/
            walgit-frontend/test-results/
          retention-days: 7

  # Job 4: E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [backend-cli-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install root dependencies
        run: npm ci
        
      - name: Install backend dependencies
        working-directory: ./walgit-backend
        run: npm ci
        
      - name: Install frontend dependencies
        working-directory: ./walgit-frontend
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Build frontend for E2E tests
        working-directory: ./walgit-frontend
        run: npm run build
        
      - name: Start frontend server
        working-directory: ./walgit-frontend
        run: |
          npm start &
          sleep 30
          curl -f http://localhost:3000 || exit 1
        env:
          NODE_ENV: production
          
      - name: Run CLI workflow E2E tests
        run: npx playwright test tests/e2e/cli-workflows.spec.js
        env:
          NODE_ENV: test
          WALGIT_TEST_MODE: true
          
      - name: Run frontend workflow E2E tests
        run: npx playwright test tests/e2e/frontend-workflows.spec.js
        env:
          NODE_ENV: test
          
      - name: Run cross-platform integration tests
        run: npx playwright test tests/e2e/cross-platform-integration.spec.js
        env:
          NODE_ENV: test
          WALGIT_TEST_MODE: true
          
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7
          
      - name: Upload E2E screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots
          path: test-results/
          retention-days: 3

  # Job 5: Security and Performance Tests
  security-performance-tests:
    name: Security & Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd walgit-backend && npm ci
          cd ../walgit-frontend && npm ci
          
      - name: Run security audit
        run: |
          cd walgit-backend && npm audit --audit-level moderate --json > npm-audit.json || true
          cd ../walgit-frontend && npm audit --audit-level moderate --json > npm-audit.json || true
          
      # Dependency vulnerability scan removed - action not available
        
      - name: Performance tests - Frontend bundle size
        working-directory: ./walgit-frontend
        run: |
          npm run build
          npx bundlesize
        continue-on-error: true
        
      - name: Performance tests - CLI startup time
        working-directory: ./walgit-backend
        run: |
          time node cli/bin/walgit.js --help
          time node cli/bin/walgit.js --version
        continue-on-error: true
        
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            walgit-backend/npm-audit.json
            walgit-frontend/npm-audit.json
          retention-days: 30

  # Job 6: Cross-Platform Compatibility
  cross-platform-tests:
    name: Cross-Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
        
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install backend dependencies
        working-directory: ./walgit-backend
        run: npm ci
        
      - name: Test CLI on ${{ matrix.os }}
        working-directory: ./walgit-backend
        run: |
          npm test
          node cli/bin/walgit.js --help
          node cli/bin/walgit.js --version
        env:
          NODE_ENV: test
          WALGIT_TEST_MODE: true

  # Job 7: Test Results Aggregation and Reporting
  test-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [smart-contract-tests, backend-cli-tests, frontend-tests, e2e-tests, security-performance-tests]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        
      - name: Aggregate test results
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          
          echo "## Smart Contract Tests" >> test-summary.md
          if [ -d "move-test-results" ]; then
            echo "✅ Smart contract tests completed" >> test-summary.md
          else
            echo "❌ Smart contract tests failed" >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "## Backend CLI Tests" >> test-summary.md
          if [ -d "backend-test-results-node18" ]; then
            echo "✅ Backend tests completed (Node 18)" >> test-summary.md
          else
            echo "❌ Backend tests failed (Node 18)" >> test-summary.md
          fi
          
          if [ -d "backend-test-results-node20" ]; then
            echo "✅ Backend tests completed (Node 20)" >> test-summary.md
          else
            echo "❌ Backend tests failed (Node 20)" >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "## Frontend Tests" >> test-summary.md
          if [ -d "frontend-test-results" ]; then
            echo "✅ Frontend tests completed" >> test-summary.md
          else
            echo "❌ Frontend tests failed" >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "## E2E Tests" >> test-summary.md
          if [ -d "e2e-test-results" ]; then
            echo "✅ E2E tests completed" >> test-summary.md
          else
            echo "❌ E2E tests failed" >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "## Security & Performance Tests" >> test-summary.md
          if [ -d "security-scan-results" ]; then
            echo "✅ Security scan completed" >> test-summary.md
          else
            echo "❌ Security scan failed" >> test-summary.md
          fi
          
          cat test-summary.md
          
      - name: Upload aggregated results
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30
          
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Test Results\n\n${summary}`
            });

  # Job 8: Deploy Test Environment (on success)
  deploy-test-env:
    name: Deploy Test Environment
    runs-on: ubuntu-latest
    needs: [smart-contract-tests, backend-cli-tests, frontend-tests, e2e-tests]
    if: github.ref == 'refs/heads/develop' && success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Build frontend
        working-directory: ./walgit-frontend
        run: |
          npm ci
          npm run build
          
      - name: Deploy to test environment
        run: |
          echo "Deploying to test environment..."
          # Add actual deployment steps here
          
      - name: Run smoke tests on deployed environment
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          
      - name: Notify deployment success
        run: |
          echo "✅ Test environment deployed successfully"